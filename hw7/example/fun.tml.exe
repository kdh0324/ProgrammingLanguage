Machine code:
_Function_10_:
	// MLIST
4:
	// APP_ARITH
	// APP_ARITH
	add R[29] <- (*(&Heap_0 + 1), *(&Heap_1 + 1))
	push R[29]
	add R[29] <- (*(SP + -1), 1)
	push R[29]
	move TR <- *(SP + -1)
	pop R[29]
	pop R[29]
	return
	// MLIST
_Function_11_:
	// MLIST
2:
	// FUN
	malloc TR <- 2
	move (TR + 0) <- &_Function_10_
	push TR
	move TR <- *(SP + -1)
	pop R[29]
	return
	// MLIST
_Start_CSE_321_HW7_:
	// VAL
	// FUN
	malloc TR <- 2
	move (TR + 0) <- &_Function_11_
	push TR
	push *(SP + -1)
	// APP
	// APP
	// APP
	// APP
	move TR <- *(SP + -2)
	move (TR + 1) <- 1
	call *(TR + 0)
	push TR
	move TR <- *(SP + -1)
	move (TR + 1) <- 2
	call *(TR + 0)
	push TR
	move TR <- *(SP + -3)
	move (TR + 1) <- *(SP + -1)
	call *(TR + 0)
	push TR
	move TR <- *(SP + -1)
	move (TR + 1) <- 2
	call *(TR + 0)
	push TR
	move AX <- *(SP + -1)
	pop R[29]
	pop R[29]
	pop R[29]
	pop R[29]
	pop R[29]
	pop R[29]
	halt AX


Execution begins at 25:
25   _Start_CSE_321_HW7_:
26   	// VAL
27   	// FUN
28   	malloc TR <- 2
29   	move (TR + 0) <- &_Function_11_
30   	push TR
31   	push *(SP + -1)
32   	// APP
33   	// APP
34   	// APP
35   	// APP
36   	move TR <- *(SP + -2)
37   	move (TR + 1) <- 1
38   	call *(TR + 0)
14   _Function_11_:
15   	// MLIST
16   2:
17   	// FUN
18   	malloc TR <- 2
19   	move (TR + 0) <- &_Function_10_
20   	push TR
21   	move TR <- *(SP + -1)
22   	pop R[29]
23   	return
39   	push TR
40   	move TR <- *(SP + -1)
41   	move (TR + 1) <- 2
42   	call *(TR + 0)
0   _Function_10_:
1   	// MLIST
2   4:
3   	// APP_ARITH
4   	// APP_ARITH
5   	add R[29] <- (*(&Heap_0 + 1), *(&Heap_1 + 1))
6   	push R[29]
7   	add R[29] <- (*(SP + -1), 1)
8   	push R[29]
9   	move TR <- *(SP + -1)
10   	pop R[29]
11   	pop R[29]
12   	return
43   	push TR
44   	move TR <- *(SP + -3)
45   	move (TR + 1) <- *(SP + -1)
46   	call *(TR + 0)
14   _Function_11_:
15   	// MLIST
16   2:
17   	// FUN
18   	malloc TR <- 2
19   	move (TR + 0) <- &_Function_10_
20   	push TR
21   	move TR <- *(SP + -1)
22   	pop R[29]
23   	return
47   	push TR
48   	move TR <- *(SP + -1)
49   	move (TR + 1) <- 2
50   	call *(TR + 0)
0   _Function_10_:
1   	// MLIST
2   4:
3   	// APP_ARITH
4   	// APP_ARITH
5   	add R[29] <- (*(&Heap_0 + 1), *(&Heap_1 + 1))
6   	push R[29]
7   	add R[29] <- (*(SP + -1), 1)
8   	push R[29]
9   	move TR <- *(SP + -1)
10   	pop R[29]
11   	pop R[29]
12   	return
51   	push TR
52   	move AX <- *(SP + -1)
53   	pop R[29]
54   	pop R[29]
55   	pop R[29]
56   	pop R[29]
57   	pop R[29]
58   	pop R[29]
59   	halt AX

Stack(0) = 

&Heap_2 = [0] = &_Function_10_ [1] = 2
&Heap_1 = [0] = &_Function_10_ [1] = 2
&Heap_0 = [0] = &_Function_11_ [1] = 4

Execution statistics
	code size = 42
	max stack = 8
	max heap = 6
	instructions executed = 56
	memory read = 41
	memory write = 27
	register read = 61
	register write = 68
Total time cost = 1425
Total memory cost = 56

Normal termination
	Result = 7
